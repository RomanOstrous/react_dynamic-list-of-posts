{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","Services/services.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","id","title","type","cn","onClick","handleOpenPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","postComments","setPostComments","setErrorMessage","selectedPostId","useState","name","setName","nameError","setNameError","email","setEmail","emailError","setEmailError","textarea","setTextarea","textareaError","setTextareaError","loading","setLoading","addComment","postId","commentName","commentEmail","createComment","newComment","catch","finally","onSubmit","event","preventDefault","trim","length","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","errorMessage","commentButton","setCommentButton","useEffect","handleDelete","commentId","currentComments","filter","com","deleteComment","comment","href","UserSelector","users","selectedUser","setSelectedUser","dropdown","setDropdown","onBlur","role","user","onMouseDown","App","setUsers","setPosts","setErrorMesage","userId","ReactDOM","render","document","getElementById"],"mappings":"+QAUaA,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAC,EACI,EADJA,gBAUA,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBAAkB,UAAQ,OAA1B,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRL,UAAWM,IACT,iBACA,CAAE,YAAwB,OAAZR,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAKC,KAE1CI,QAAS,kBAtCF,SAACL,IACN,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAKC,GAC5BJ,EAAgB,MAEhBA,EAAgBG,GAkCWM,CAAeN,IAPhC,UASe,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAKC,GACvB,QACA,aAnBDD,EAAKC,gBCpCbM,G,MAAS,kBACpB,qBAAKT,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,OCJbU,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WCzB3Ba,EAAkC,SAAC,GAKzC,IAJLC,EAII,EAJJA,aACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,eAEA,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAgCR,mBAAS,IAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAA0CV,oBAAS,GAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KACA,EAA8BZ,oBAAS,GAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KAiBMC,EAAa,SAAC,GAKJ,IAJdC,EAIa,EAJbA,OACMC,EAGO,EAHbhB,KACOiB,EAEM,EAFbb,MACAnB,EACa,EADbA,KAEAY,EAAgB,IAChBgB,GAAW,GC1Bb,SAAC,GAKyB,IAJ1BE,EAIyB,EAJzBA,OACAf,EAGyB,EAHzBA,KACAI,EAEyB,EAFzBA,MACAnB,EACyB,EADzBA,KAEA,OAAOQ,EAAqB,YAAa,CACvCsB,SACAf,OACAI,QACAnB,SDkBAiC,CAAc,CACZH,SACAf,KAAMgB,EACNZ,MAAOa,EACPhC,SAECI,MAAK,SAAA8B,GACJvB,EAAgB,GAAD,mBAAKD,GAAL,CAAmBwB,QAEnCC,OAAM,WACLvB,EAAgB,yBAChBY,EAAY,OAEbY,SAAQ,WACPR,GAAW,GACXJ,EAAY,QAgClB,OACE,uBACE,UAAQ,iBACRa,SA/BiB,SAACC,GACpBA,EAAMC,iBACNrB,GAAcH,EAAKyB,QACnBlB,GAAeH,EAAMqB,QACrBd,GAAkBH,EAASiB,QAEtBzB,EAAKyB,QAAWrB,EAAMqB,QAAWjB,EAASiB,QAI/CX,EAAW,CACT/C,GAAI4B,EAAa+B,OACjBX,OAAQjB,EACRE,OACAI,QACAnB,KAAMuB,KAcR,UAIE,sBAAK5C,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ+D,QAAQ,sBAAjC,yBAIA,sBAAK/D,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL+B,KAAK,OACLjC,GAAG,sBACH6D,YAAY,eACZhE,UAAWiE,IAAW,QAAS,CAAE,YAAa3B,IAC9C4B,MAAO9B,EACP+B,SAzFe,SAACR,GACxBtB,EAAQsB,EAAMS,OAAOF,OACrB3B,GAAa,MAyFP,sBAAMvC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdsC,GACC,sBACEtC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAMlBsC,GACC,mBAAGtC,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQ+D,QAAQ,uBAAjC,0BAIA,sBAAK/D,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL+B,KAAK,QACLjC,GAAG,uBACH6D,YAAY,iBACZhE,UAAWiE,IAAW,QAAS,CAAE,YAAavB,IAC9CwB,MAAO1B,EACP2B,SAzHgB,SAACR,GACzBlB,EAASkB,EAAMS,OAAOF,OACtBvB,GAAc,MA0HR,sBAAM3C,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAEd0C,GACC,sBACE1C,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAIlB0C,GACC,mBAAG1C,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ+D,QAAQ,eAAjC,0BAIA,qBAAK/D,UAAU,UAAf,SACE,0BACEG,GAAG,eACHiC,KAAK,OACL4B,YAAY,oBACZhE,UAAWiE,IAAW,WAAY,CAAE,YAAavB,IACjDwB,MAAOtB,EACPuB,SAtJe,SAACR,GACxBd,EAAYc,EAAMS,OAAOF,OACzBnB,GAAiB,QAwJZD,GACC,mBAAG9C,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWiE,IAAW,iBAAkB,CACtC,aAAcjB,IAHlB,mBAUF,qBAAKhD,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVO,QA9HU,WAClB8B,EAAQ,IACRI,EAAS,IACTI,EAAY,IACZN,GAAa,GACbI,GAAc,GACdI,GAAiB,IAqHX,4BExMGsB,EAA+B,SAAC,GAEtC,IADLvE,EACI,EADJA,aAEA,EAAwCqC,mBAAoB,IAA5D,mBAAOJ,EAAP,KAAqBC,EAArB,KACA,EAA8BG,oBAAS,GAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KACA,EAAwCd,mBAAS,IAAjD,mBAAOmC,EAAP,KAAqBrC,EAArB,KACA,EAA0CE,oBAAS,GAAnD,mBAAOoC,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WDNe,IAACtB,ECOpBrD,IACFmD,GAAW,IDRWE,ECUVrD,EAAaK,GDTtB0B,EAAA,2BAA0CsB,KCU1C1B,KAAKO,GACLwB,OAAM,WACLvB,EAAgB,2BAEjBwB,SAAQ,WACPR,GAAW,OAIjBuB,GAAiB,KAChB,CAAC1E,IAEJ,IAAM4E,EAAe,SAACC,GACpB3C,GAAgB,SAAA4C,GAAe,OAAIA,EAChCC,QAAO,SAAAC,GAAG,OAAIA,EAAI3E,KAAOwE,QDrBH,SAACA,GAC5B,OAAO9C,EAAA,oBAA2B8C,ICqBhCI,CAAcJ,GACXnB,OAAM,WACLxB,EAAgBD,GAChBE,EAAgB,kCAItB,OACE,qBAAKjC,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,2BACOF,QADP,IACOA,OADP,EACOA,EAAcK,GADrB,oBAC4BL,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAcM,SAG1C,mBAAG,UAAQ,WAAX,gBACGN,QADH,IACGA,OADH,EACGA,EAAcuB,UAInB,sBAAKrB,UAAU,QAAf,UACGgD,GACC,cAAC,EAAD,KAGAA,GAAWsB,GACX,qBAAKtE,UAAU,yBAAyB,UAAQ,gBAAhD,SACGsE,KAIHtB,IAAYsB,IAAiBvC,EAAa+B,QAC1C,mBAAG9D,UAAU,aAAa,UAAQ,oBAAlC,8BAKAgD,GAAWjB,EAAa+B,OAAS,GACjC,qCACE,mBAAG9D,UAAU,aAAb,uBACC+B,EAAa9B,KAAI,SAAA+E,GAAO,OACvB,0BAEEhF,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBACEiF,KAAI,iBAAYD,EAAQxC,OACxB,UAAQ,gBAFV,SAIGwC,EAAQ5C,OAEX,wBACE,UAAQ,gBACR/B,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,kBAAMmE,EAAaM,EAAQ7E,KALtC,8BAWF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACGgF,EAAQ3D,SAvBN2D,EAAQ7E,WAgCnB6C,GAAWuB,GACX,wBACE,UAAQ,qBACRlE,KAAK,SACLL,UAAU,iBACVO,QAAS,kBAAMiE,GAAkBD,IAJnC,gCAWHzE,IAAiBkD,IAAYuB,GAC5B,cAAC,EAAD,CACExC,aAAcA,EACdC,gBAAiBA,EACjBC,gBAAiBA,EACjBC,eAAgBpC,EAAaK,WCxH5B+E,EAAgC,SAAC,GAIvC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAC,EACI,EADJA,gBAEA,EAAgClD,oBAAS,GAAzC,mBAAOmD,EAAP,KAAiBC,EAAjB,KAEA,OACE,sBACE,UAAQ,eACRvF,UAAWM,IAAG,WAAY,CAAE,YAAagF,IAF3C,UAIE,qBAAKtF,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QAAS,kBAAMgF,GAAaD,IAC5BE,OAAQ,kBAAMD,GAAY,IAN5B,UAQE,+BAAOH,EAAeA,EAAahD,KAAO,kBAE1C,sBAAMpC,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBG,GAAG,gBAAgBsF,KAAK,OAAvD,SACE,qBAAKzF,UAAU,mBAAf,SACGmF,EAAMlF,KAAI,SAAAyF,GAAI,OACb,mBAEET,KAAI,gBAAWS,EAAKvF,IACpBH,UAAWM,IAAG,gBAAiB,CAC7B,YAAaoF,EAAKvF,MAAL,OAAYiF,QAAZ,IAAYA,OAAZ,EAAYA,EAAcjF,MAEzCwF,YAAa,kBAAMN,EAAgBK,IANrC,SAQGA,EAAKtD,MAPDsD,EAAKvF,eC7BXyF,EAAgB,WAC3B,MAA0BzD,mBAAiB,IAA3C,mBAAOgD,EAAP,KAAcU,EAAd,KACA,EAAwC1D,mBAAsB,MAA9D,mBAAOiD,EAAP,KAAqBC,EAArB,KACA,EAA0BlD,mBAAiB,IAA3C,mBAAOtC,EAAP,KAAciG,EAAd,KACA,EAAwC3D,mBAAsB,MAA9D,mBAAOrC,EAAP,KAAqBC,EAArB,KACA,EAA8BoC,oBAAS,GAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KACA,EAAuCd,mBAAS,IAAhD,mBAAOmC,EAAP,KAAqByB,EAArB,KAqBA,OAnBAtB,qBAAU,WHhBH5C,EAAmB,UGkBrBJ,KAAKoE,GACLrC,OAAM,kBAAMuC,EAAe,8BAC7B,IAEHtB,qBAAU,WHnBY,IAACuB,EGoBjBZ,IACFnC,GAAW,IHrBQ+C,EGuBVZ,EAAajF,GHtBnB0B,EAAA,wBAAoCmE,KGuBpCvE,KAAKqE,GACLtC,OAAM,kBAAMuC,EAAe,4BAC3BtC,SAAQ,kBAAMR,GAAW,OAG9BlD,EAAgB,QACf,CAACqF,IAGF,sBAAMpF,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UAEE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEmF,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,MAIrB,sBAAKrF,UAAU,QAAQ,UAAQ,cAA/B,WACIoF,GACA,mBAAG,UAAQ,iBAAX,8BAKDpC,GACC,cAAC,EAAD,KAGAA,GAAWsB,GACX,qBACEtE,UAAU,yBACV,UAAQ,oBAFV,SAIGsE,KAIHtB,IAAYsB,IACRzE,EAAMiE,QAAUsB,GACpB,qBACEpF,UAAU,0BACV,UAAQ,aAFV,2BAQAgD,GAAWnD,EAAMiE,OAAS,GAC1B,cAAC,EAAD,CACEjE,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,YAQ1BD,GACC,qBACE,UAAQ,UACRE,UAAWiE,IACT,OACA,YACA,eACA,UACA,iBAPJ,SAUE,qBAAKjE,UAAU,gCAAf,SACE,cAAC,EAAD,CAAaF,aAAcA,gBC1G3CmG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a4b81b93.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost(post: Post | null): void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handleOpenPost = (post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn(\n                    'button is-link',\n                    { 'is-light': selectedPost?.id !== post.id },\n                  )}\n                  onClick={() => handleOpenPost(post)}\n                >\n                  {selectedPost?.id === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { createComment } from '../Services/services';\n\ntype Props = {\n  postComments: Comment[],\n  setPostComments: (comment: Comment[]) => void,\n  setErrorMessage: (str: string) => void,\n  selectedPostId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postComments,\n  setPostComments,\n  setErrorMessage,\n  selectedPostId,\n}) => {\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [textarea, setTextarea] = useState('');\n  const [textareaError, setTextareaError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setNameError(false);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setEmailError(false);\n  };\n\n  const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setTextarea(event.target.value);\n    setTextareaError(false);\n  };\n\n  const addComment = ({\n    postId,\n    name: commentName,\n    email: commentEmail,\n    body,\n  }: Comment) => {\n    setErrorMessage('');\n    setLoading(true);\n\n    createComment({\n      postId,\n      name: commentName,\n      email: commentEmail,\n      body,\n    })\n      .then(newComment => {\n        setPostComments([...postComments, newComment]);\n      })\n      .catch(() => {\n        setErrorMessage('Something went wrong!');\n        setTextarea('');\n      })\n      .finally(() => {\n        setLoading(false);\n        setTextarea('');\n      });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setNameError(!name.trim());\n    setEmailError(!email.trim());\n    setTextareaError(!textarea.trim());\n\n    if (!name.trim() || !email.trim() || !textarea.trim()) {\n      return;\n    }\n\n    addComment({\n      id: postComments.length,\n      postId: selectedPostId,\n      name,\n      email,\n      body: textarea,\n    });\n  };\n\n  const handleClear = () => {\n    setName('');\n    setEmail('');\n    setTextarea('');\n    setNameError(false);\n    setEmailError(false);\n    setTextareaError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': nameError })}\n            value={name}\n            onChange={handleNameChange}\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': emailError })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': emailError })}\n            value={textarea}\n            onChange={handleTextChange}\n          />\n        </div>\n\n        {textareaError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': loading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment\n= ({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { deleteComment, getComments } from '../Services/services';\n\ntype Props = {\n  selectedPost: Post | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [commentButton, setCommentButton] = useState(true);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setLoading(true);\n\n      getComments(selectedPost.id)\n        .then(setPostComments)\n        .catch(() => {\n          setErrorMessage('Something went wrong');\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n\n    setCommentButton(true);\n  }, [selectedPost]);\n\n  const handleDelete = (commentId: number) => {\n    setPostComments(currentComments => currentComments\n      .filter(com => com.id !== commentId));\n    deleteComment(commentId)\n      .catch(() => {\n        setPostComments(postComments);\n        setErrorMessage('Unable to delete a comment');\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loading && (\n            <Loader />\n          )}\n\n          {!loading && errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorMessage}\n            </div>\n          )}\n\n          {!loading && !errorMessage && !postComments.length && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!loading && postComments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {postComments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n\n              ))}\n\n            </>\n          )}\n\n          {!loading && commentButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setCommentButton(!commentButton)}\n            >\n              Write a comment\n            </button>\n\n          )}\n        </div>\n        {selectedPost && !loading && !commentButton && (\n          <NewCommentForm\n            postComments={postComments}\n            setPostComments={setPostComments}\n            setErrorMessage={setErrorMessage}\n            selectedPostId={selectedPost.id}\n          />\n        )}\n\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  setSelectedUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [dropdown, setDropdown] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': dropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdown(!dropdown)}\n          onBlur={() => setDropdown(false)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onMouseDown={() => setSelectedUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPosts, getUsers } from './Services/services';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMesage] = useState('');\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setErrorMesage('Failed to load users!'));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoading(true);\n\n      getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setErrorMesage('Something went wrong!'))\n        .finally(() => setLoading(false));\n    }\n\n    setSelectedPost(null);\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading && (\n                  <Loader />\n                )}\n\n                {!loading && errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {!loading && !errorMessage\n                  && !posts.length && selectedUser && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {!loading && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails selectedPost={selectedPost} />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}